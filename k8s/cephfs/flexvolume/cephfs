#!/bin/bash

# Copyright 2015 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Notes:
#  - Please install "jq" package before using this driver.
usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 mount <mount dir> <json params>"
	err "\t$0 unmount <mount dir>"
	exit 1
}

err() {
	echo -ne $* 1>&2
}

log() {
	echo -ne $* >&1
}

ismounted() {
	MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
	if [ "${MOUNT}" == "${MNTPATH}" ]; then
		echo "1"
	else
		echo "0"
	fi
}

domount() {
	MNTPATH=$1

	SHARE=$(echo $2 | jq -r '.share')
	AUTH_ID=$(echo $2 | jq -r '.authid')
	KEYRING=$(echo $2 | jq -r '.["kubernetes.io/secret/keyring"]')

	# If value of keyring  is null it means secret not present. Try to parse it
	# from an option instead of a secret
	if [[ ${KEYRING} == 'null' ]]; then
		KEYRING=$(echo $2 | jq -r '.keyring')
	fi

	# If keyring is still null, it means there is no keyring. Abort
	if [[ ${KEYRING} == 'null' ]]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share ${SHARE} at ${MNTPATH} due to no keyring\"}"
		exit 1
	fi

	if [ $(ismounted) -eq 1 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	# Ensure only root can read the keyring file
	current_umask=$(umask)
	umask 077
	# Write keyring to file
	KEYRING_PATH="/var/run/cephfs/${AUTH_ID}/ceph.client.${AUTH_ID}.keyring"
	mkdir -p "/var/run/cephfs/${AUTH_ID}"
	echo $KEYRING | base64 -d > $KEYRING_PATH
	umask $current_umask

	# Mount the share with ceph-fuse
	mkdir -p ${MNTPATH} &> /dev/null
	# Expect the conf file to be written in /etc/ceph/ceph.conf	which is where the
	# ceph puppet module installs the file.
	output=$(ceph-fuse ${MNTPATH} --id=${AUTH_ID} --conf=/etc/ceph/ceph.conf --keyring=${KEYRING_PATH} \
	--client-mountpoint=${SHARE} 2>&1)

	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share ${SHARE} at ${MNTPATH}: ${output}\"}"
		exit 1
	fi
	log "{\"status\": \"Success\"}"
	exit 0
}

unmount() {
	MNTPATH=$1
	if [ $(ismounted) -eq 0 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	umount ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
		exit 1
	fi

	log "{\"status\": \"Success\"}"
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
    # SELinux relabel not supported on a FUSE mount point
	log "{\"status\": \"Success\", \"capabilities\": {\"attach\": false, \"selinuxRelabel\": false}}"
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	mount)
		domount $*
		;;
	unmount)
		unmount $*
		;;
	*)
		log "{ \"status\": \"Not supported\" }"
		exit 0
esac

exit 1
